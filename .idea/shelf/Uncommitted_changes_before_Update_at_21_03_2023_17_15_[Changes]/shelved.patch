Index: src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.modelSupport;\r\n\r\nimport it.polimi.ingsw.model.helpers.Pair;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\n\r\npublic class PersonalGoal {\r\n\r\n    //TODO: riempire queste\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> first = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)), new Pair(colorType.BLUE, new Pair(0, 2)), new Pair(colorType.GREEN, new Pair(1, 4)), new Pair(colorType.WHITE, new Pair(2, 3)), new Pair(colorType.YELLOW, new Pair(3, 1)), new Pair(colorType.LIGHT_BLUE, new Pair(5, 2)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> second = Arrays.asList(new Pair(colorType.PURPLE, new Pair(1, 1)), new Pair(colorType.GREEN, new Pair(2, 0)), new Pair(colorType.YELLOW, new Pair(2, 2)), new Pair(colorType.WHITE, new Pair(3, 4)), new Pair(colorType.LIGHT_BLUE, new Pair(4, 3)), new Pair(colorType.BLUE, new Pair(5, 4)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> third = Arrays.asList(new Pair(colorType.BLUE, new Pair(1, 0)), new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> fourth = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> fifth = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> sixth = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> seventh = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> eight = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> ninth = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> tenth = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> eleventh = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n    private static final List<Pair<colorType, Pair<Integer, Integer>>> twelve = Arrays.asList(new Pair(colorType.PURPLE, new Pair(0, 0)));\r\n\r\n    /**\r\n     * List of all the possible common goals, each of them is a List composed by [card type, x coord, y coord]\r\n     */\r\n    private static final List<List<Pair<colorType, Pair<Integer, Integer>>>> personalGoals= Arrays.asList(first, second, third, fourth, fifth, sixth, seventh, eight, ninth, tenth, eleventh, twelve);\r\n    private final List<Pair<colorType, Pair<Integer, Integer>>> selectedGoal;\r\n\r\n    /**\r\n     * Initializes the selected goal for the player, caller guarantees the index be different from the other players index\r\n     * @param withIndex personal goal card # to choose\r\n     */\r\n    PersonalGoal(int withIndex) {\r\n        this.selectedGoal = personalGoals.get(withIndex);\r\n    }\r\n\r\n    /**\r\n     * By looking at the shelf cards matrix the personal goals score is calculated\r\n     * @param withCards players shelf cards\r\n     * @return returns the calculated points\r\n     */\r\n    public int calculatePoints(BoardCard[][] withCards){\r\n        int correct = 0;\r\n        for(int i = 0; i < selectedGoal.size(); i++){\r\n            Pair<colorType, Pair<Integer, Integer>> item = selectedGoal.get(i);\r\n            //if same color at correct position\r\n            if(item.getFirst() == withCards[item.getSecond().getFirst()][item.getSecond().getSecond()].getColor()){\r\n                correct++;\r\n            }\r\n        }\r\n        switch(correct) {\r\n            case 1:\r\n                return 1;\r\n            case 2:\r\n                return 2;\r\n            case 3:\r\n                return 4;\r\n            case 4:\r\n                return 6;\r\n            case 5:\r\n                return 9;\r\n            case 6:\r\n                return 12;\r\n            default:\r\n                return 0; // or throw an exception for invalid inputs\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java b/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java
--- a/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java	(date 1679415306092)
@@ -1,11 +1,9 @@
 package it.polimi.ingsw.model.modelSupport;
 
 import it.polimi.ingsw.model.helpers.Pair;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.Random;
 
 
 public class PersonalGoal {
Index: src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.modelSupport;\r\nimport it.polimi.ingsw.model.helpers.Pair;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\nimport it.polimi.ingsw.model.modelSupport.exceptions.NoMoreCardsException;\r\nimport it.polimi.ingsw.model.modelSupport.exceptions.UnselectableCardException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\n\r\npublic class LivingRoom{\r\n\r\n    private final static int DIM = 9;\r\n    private final static int TOTCARDS = 132;\r\n    private final static int COLORS = 6;\r\n    private final static int NUMXCOLOR = 22;\r\n\r\n    private final static BoardCard THOMBSTONE = new BoardCard(colorType.THOMBSTONE);\r\n\r\n    /**\r\n     * Integer matrix that represents the \"footprint\" of the generic two-players game, {x,z} where x is the starting column and z the number of items in the row\r\n     */\r\n    private final static Integer[][] fp2 = {{0,0}, {3,2}, {3,3}, {2,6}, {1,7}, {1,6}, {3,3}, {4,2}, {0,0}};\r\n    /**\r\n     * Integer matrix that represents the \"footprint\" of the generic three-players game, {x,z} where x is the starting column and z the number of items in the row\r\n     */\r\n    private final static Integer[][] fp3 = {{3,1}, {3,2}, {2,5}, {2,7}, {1,7}, {0,7}, {2,5}, {4,2}, {0,0}};\r\n    /**\r\n     * Integer matrix that represents the \"footprint\" of generic the four-players game, {x,z} where x is the starting column and z the number of items in the row\r\n     */\r\n    private final static Integer[][] fp4 = {{3,2}, {3,3}, {2,5}, {1,7}, {0,9}, {0,8}, {2, 5}, {3,3}, {4,2}};\r\n    private final static ArrayList<Integer[][]> posItms = new ArrayList<>();\r\n\r\n    /**\r\n     * BoardCard matrix that represents the board, null means no cards in match, a thombstone card is put when the position doesn't have a card\r\n     */\r\n    private BoardCard [][] pieces;\r\n    /**\r\n     * BoardCard bag with shuffled cards\r\n     */\r\n    private final List<BoardCard> bag = new ArrayList<BoardCard>();\r\n    /**\r\n     * Index of the last-selected card in the bag\r\n     */\r\n    private int indexOfStackCard;\r\n\r\n\r\n    /**\r\n     * Create the shuffled bag, fills the livingroom\r\n     * @param numOfPLayers number of players, needed to know how to fill the board\r\n     */\r\n    public LivingRoom(int numOfPLayers) {\r\n        //preparo un Arraylist da cui prendere le carte di vari colori\r\n        List<BoardCard> temp = new ArrayList<BoardCard>();\r\n        colorType[] colors = {colorType.PURPLE, colorType.BLUE, colorType.LIGHT_BLUE, colorType.YELLOW, colorType.WHITE, colorType.GREEN};\r\n        for (int j = 0; j < COLORS; j++) {\r\n            for (int i = 0; i < NUMXCOLOR; i++) {\r\n                BoardCard card = new BoardCard(colors[j]);\r\n                temp.add(card);\r\n            }\r\n        }\r\n        //pesco carte dall'ArrayList per creare il mazzo\r\n        Random random = new Random();\r\n        for (int i = 0; i < TOTCARDS; i++) {\r\n            int range = temp.size();\r\n            int chosen = random.nextInt(range);\r\n            BoardCard piece = temp.get(chosen);\r\n            bag.add(piece);\r\n            temp.remove(chosen);\r\n        }\r\n\r\n\r\n        //Fill the livingroom\r\n        posItms.add(fp2);\r\n        posItms.add(fp3);\r\n        posItms.add(fp4);\r\n\r\n        /**\r\n         * Integer matrix that represents the \"footprint\" of the constructed n-players game, {x,z} where x is the starting column and z the number of items in the row\r\n         */\r\n        Integer[][] fp = posItms.get(numOfPLayers - 2);\r\n        this.pieces = new BoardCard[DIM][DIM];\r\n        //Insert the cards in the living room\r\n        indexOfStackCard = 0;\r\n        for(int i = 0; i < DIM; i++){\r\n            for(int j = 0; j < DIM; j++){\r\n                if(j >= fp[i][0] && j < fp[i][0] + fp[i][1]){\r\n                    pieces[i][j] = bag.get(indexOfStackCard);\r\n                    indexOfStackCard++;\r\n                }else{\r\n                    pieces[i][j] = null;\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        for(int i = 0; i < DIM; i++){\r\n            for(int j = 0; j < DIM; j++){\r\n                if (pieces[i][j] != null){\r\n                    System.out.print(pieces[i][j].getColor().toString());\r\n                    System.out.print(\" \" + i + \" \"+ j + \" | \");\r\n                }\r\n            }\r\n        }*/\r\n    }\r\n\r\n\r\n    public int getIndexOfStackCard(){\r\n        return indexOfStackCard;\r\n    }\r\n\r\n\r\n    public BoardCard[][] getPieces() {\r\n        return pieces;\r\n    }\r\n\r\n\r\n    /**\r\n     * Refills the board only if needed and returns the updated (or not if not needed) livingroom\r\n     * @param numOfPlayers players in the game\r\n     */\r\n    public BoardCard[][] refillBoard(int numOfPlayers) throws NoMoreCardsException{\r\n        //CHECK dei refill requirements\r\n        int startRefill = 1;\r\n        for (int i = 0; i < DIM; i++) {\r\n            for (int j = 0; j < DIM; j++) {\r\n                if (isPresent(i,j) && adiacent(i, j)) {\r\n                    startRefill = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        //insert where there's thombstones, in other places there are already usable cards\r\n        if (startRefill == 1) {\r\n            for(int i = 0; i < DIM; i++){\r\n                for(int j = 0; j < DIM; j++){\r\n                    if(pieces[i][j] == THOMBSTONE){\r\n                        if(indexOfStackCard > bag.size()){\r\n                            //no more cards are usable\r\n                            throw new NoMoreCardsException();\r\n                        }\r\n                        pieces[i][j] = bag.get(indexOfStackCard);\r\n                        indexOfStackCard++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return pieces;\r\n    }\r\n\r\n    /**\r\n     * Calculates all the selectable items in the board\r\n     */\r\n    public Boolean[][] calculateSelectable() {\r\n        Boolean[][] selectable = new Boolean[DIM][DIM];\r\n            for (int i = 0; i < DIM; i++) {\r\n                for (int j = 0; j < DIM; j++) {\r\n                    selectable[i][j] = isPresent(i,j) && freeCorner(i,j);\r\n            }\r\n       }\r\n       return selectable;\r\n    }\r\n\r\n\r\n    public BoardCard[][] updateBoard(ArrayList<Pair<Integer ,Integer>> selected ) throws UnselectableCardException {\r\n        for (Pair<Integer, Integer> coordinates : selected) {\r\n            int i = coordinates.getFirst();\r\n            int j = coordinates.getSecond();\r\n            if (!(isPresent(i, j) && freeCorner(i, j))) {\r\n                throw new UnselectableCardException();\r\n            }\r\n        }\r\n        for (Pair<Integer, Integer> coordinates : selected) {\r\n            int i = coordinates.getFirst();\r\n            int j = coordinates.getSecond();\r\n            pieces[i][j] = THOMBSTONE;\r\n        }\r\n        return pieces;\r\n    }\r\n\r\n    public BoardCard getBoardCardAt(Pair<Integer,Integer> coordinates) throws UnselectableCardException{\r\n        int i = coordinates.getFirst();\r\n        int j = coordinates.getSecond();\r\n        if(!isPresent(i,j))\r\n            throw new UnselectableCardException();\r\n        else return pieces[i][j];\r\n    }\r\n\r\n    /**\r\n     * Checks if an item in the board has adjacent items\r\n     * @param i i coordinate\r\n     * @param j j coordinate\r\n     * @return boolean\r\n     */\r\n    private boolean adiacent(int i, int j) {\r\n        if (i == 0) {\r\n            return isPresent(i, j - 1) || isPresent(i, j + 1) || isPresent(i + 1, j);\r\n\r\n        } else if (i == DIM - 1) {\r\n            return isPresent(i, j - 1) || isPresent(i, j + 1) || isPresent(i - 1, j);\r\n\r\n        } else if (j == 0) {\r\n            return isPresent(i - 1, j) || (isPresent(i + 1, j) || isPresent(i, j + 1));\r\n\r\n        } else if (j == DIM - 1) {\r\n            return isPresent(i, j - 1) || isPresent(i, j + 1) || isPresent(i - 1, j);\r\n\r\n        } else {\r\n            return isPresent(i, j - 1) || isPresent(i, j + 1) || isPresent(i - 1, j) || isPresent(i + 1, j);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //funzione che calcola se la tessera ha ALMENO un lato libero\r\n    private boolean freeCorner(int i, int j){\r\n        if (i == 0 || i == DIM - 1 || j == 0 || j == DIM - 1) return true;\r\n        else {\r\n            return !isPresent(i, j - 1) || !isPresent(i, j + 1) || !isPresent(i - 1, j) || !isPresent(i + 1, j);\r\n        }\r\n    }\r\n\r\n    //funzione che calcola se una tessera è presente nella Livingroom  (altrimenti è null o THOMBSTONE)\r\n    private boolean isPresent(int i, int j){\r\n        return (pieces[i][j] != THOMBSTONE) && (pieces[i][j] != null);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java b/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java
--- a/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java	(date 1679415306091)
@@ -16,7 +16,8 @@
     private final static int COLORS = 6;
     private final static int NUMXCOLOR = 22;
 
-    private final static BoardCard THOMBSTONE = new BoardCard(colorType.THOMBSTONE);
+    private final static BoardCard THOMBSTONE_CARD = new BoardCard(colorType.THOMBSTONE);
+    private final static BoardCard EMPTY_SPOT_CARD = new BoardCard(colorType.EMPTY_SPOT);
 
     /**
      * Integer matrix that represents the "footprint" of the generic two-players game, {x,z} where x is the starting column and z the number of items in the row
@@ -33,9 +34,9 @@
     private final static ArrayList<Integer[][]> posItms = new ArrayList<>();
 
     /**
-     * BoardCard matrix that represents the board, null means no cards in match, a thombstone card is put when the position doesn't have a card
+     * BoardCard matrix that represents the board, EMPTY_SPOT means no cards in match, a thombstone card is put when the position doesn't have a card
      */
-    private BoardCard [][] pieces;
+    private final BoardCard [][] pieces;
     /**
      * BoardCard bag with shuffled cards
      */
@@ -89,14 +90,14 @@
                     pieces[i][j] = bag.get(indexOfStackCard);
                     indexOfStackCard++;
                 }else{
-                    pieces[i][j] = null;
+                    pieces[i][j] = EMPTY_SPOT_CARD;
                 }
             }
         }
         /*
         for(int i = 0; i < DIM; i++){
             for(int j = 0; j < DIM; j++){
-                if (pieces[i][j] != null){
+                if (pieces[i][j] != EMPTY_SPOT){
                     System.out.print(pieces[i][j].getColor().toString());
                     System.out.print(" " + i + " "+ j + " | ");
                 }
@@ -117,9 +118,10 @@
 
     /**
      * Refills the board only if needed and returns the updated (or not if not needed) livingroom
+     *
      * @param numOfPlayers players in the game
      */
-    public BoardCard[][] refillBoard(int numOfPlayers) throws NoMoreCardsException{
+    public void refillBoard(int numOfPlayers) throws NoMoreCardsException{
         //CHECK dei refill requirements
         int startRefill = 1;
         for (int i = 0; i < DIM; i++) {
@@ -134,7 +136,7 @@
         if (startRefill == 1) {
             for(int i = 0; i < DIM; i++){
                 for(int j = 0; j < DIM; j++){
-                    if(pieces[i][j] == THOMBSTONE){
+                    if(pieces[i][j].getColor() == colorType.THOMBSTONE){
                         if(indexOfStackCard > bag.size()){
                             //no more cards are usable
                             throw new NoMoreCardsException();
@@ -145,7 +147,6 @@
                 }
             }
         }
-        return pieces;
     }
 
     /**
@@ -221,9 +222,9 @@
         }
     }
 
-    //funzione che calcola se una tessera è presente nella Livingroom  (altrimenti è null o THOMBSTONE)
+    //funzione che calcola se una tessera è presente nella Livingroom  (altrimenti è EMPTY_PIECE o THOMBSTONE)
     private boolean isPresent(int i, int j){
-        return (pieces[i][j] != THOMBSTONE) && (pieces[i][j] != null);
+        return (pieces[i][j] != THOMBSTONE) && (pieces[i][j] != EMPTY_PIECE);
     }
 
 }
Index: src/main/java/it/polimi/ingsw/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.helpers.Pair;\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.Player;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\nimport it.polimi.ingsw.model.modelSupport.exceptions.UnselectableCardException;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        ArrayList<Player> players = new ArrayList<>();\r\n        players.add(new Player(\"Max\"));\r\n        players.add(new Player(\"Asso\"));\r\n        players.add(new Player(\"Rick\"));\r\n        players.add(new Player(\"Chicco\"));\r\n        Game myGame = new Game(players);\r\n        ArrayList<Pair<Integer, Integer>> sel = new ArrayList<>();\r\n        sel.add(new Pair<>(0, 3));\r\n        sel.add(new Pair<>(0, 4));\r\n        System.out.println(\"\\n\\n\\nNEW PLAYER 1\");\r\n        try {\r\n            myGame.selectedCards(sel);\r\n        } catch (UnselectableCardException e) {\r\n            // TODO Auto-generated catch block\r\n            System.out.println(\"Not sel\");\r\n            e.printStackTrace();\r\n        }\r\n        ArrayList<BoardCard> crds = new ArrayList<>();\r\n        crds.add(new BoardCard(colorType.BLUE));\r\n        crds.add(new BoardCard(colorType.PURPLE));\r\n        myGame.selectedColumn(crds, 1);\r\n\r\n        //---- new round\r\n        System.out.println(\"\\n\\n\\nNEW PLAYER 2\");\r\n        sel = new ArrayList<>();\r\n        sel.add(new Pair<>(1, 4));\r\n        sel.add(new Pair<>(1, 5));\r\n\r\n        try {\r\n            myGame.selectedCards(sel);\r\n        } catch (UnselectableCardException e) {\r\n            // TODO Auto-generated catch block\r\n            System.out.println(\"Not sel\");\r\n            e.printStackTrace();\r\n        }\r\n        crds = new ArrayList<>();\r\n        crds.add(new BoardCard(colorType.LIGHT_BLUE));\r\n        crds.add(new BoardCard(colorType.YELLOW));\r\n        myGame.selectedColumn(crds, 1);\r\n\r\n        //---- new round\r\n        System.out.println(\"\\n\\n\\nNEW PLAYER 3\");\r\n        sel = new ArrayList<>();\r\n        sel.add(new Pair<>(4, 0));\r\n        sel.add(new Pair<>(5, 0));\r\n\r\n        try {\r\n            myGame.selectedCards(sel);\r\n        } catch (UnselectableCardException e) {\r\n            // TODO Auto-generated catch block\r\n            System.out.println(\"Not sel\");\r\n            e.printStackTrace();\r\n        }\r\n        crds = new ArrayList<>();\r\n        crds.add(new BoardCard(colorType.LIGHT_BLUE));\r\n        crds.add(new BoardCard(colorType.YELLOW));\r\n        myGame.selectedColumn(crds, 1);\r\n\r\n        //---- new round\r\n        System.out.println(\"\\n\\n\\nNEW PLAYER 4\");\r\n        sel = new ArrayList<>();\r\n        sel.add(new Pair<>(2, 4));\r\n        sel.add(new Pair<>(2, 5));\r\n        sel.add(new Pair<>(2, 6));\r\n\r\n        try {\r\n            myGame.selectedCards(sel);\r\n        } catch (UnselectableCardException e) {\r\n            // TODO Auto-generated catch block\r\n            System.out.println(\"Not sel\");\r\n            e.printStackTrace();\r\n        }\r\n        crds = new ArrayList<>();\r\n        crds.add(new BoardCard(colorType.BLUE));\r\n        crds.add(new BoardCard(colorType.YELLOW));\r\n        myGame.selectedColumn(crds, 1);\r\n\r\n        //---- new round\r\n        System.out.println(\"\\n\\n\\nNEW PLAYER 12\");\r\n        sel = new ArrayList<>();\r\n        sel.add(new Pair<>(1, 3));\r\n        sel.add(new Pair<>(2, 3));\r\n\r\n        try {\r\n            myGame.selectedCards(sel);\r\n        } catch (UnselectableCardException e) {\r\n            // TODO Auto-generated catch block\r\n            System.out.println(\"Not sel\");\r\n            e.printStackTrace();\r\n        }\r\n        crds = new ArrayList<>();\r\n        crds.add(new BoardCard(colorType.BLUE));\r\n        crds.add(new BoardCard(colorType.YELLOW));\r\n        myGame.selectedColumn(crds, 1);\r\n\r\n        //---- new round\r\n        System.out.println(\"\\n\\n\\nNEW PLAYER 22\");\r\n        sel = new ArrayList<>();\r\n        sel.add(new Pair<>(3, 3));\r\n        sel.add(new Pair<>(3, 4));\r\n\r\n        try {\r\n            myGame.selectedCards(sel);\r\n        } catch (UnselectableCardException e) {\r\n            // TODO Auto-generated catch block\r\n            System.out.println(\"Not sel\");\r\n            e.printStackTrace();\r\n        }\r\n        crds = new ArrayList<>();\r\n        crds.add(new BoardCard(colorType.YELLOW));\r\n        crds.add(new BoardCard(colorType.LIGHT_BLUE));\r\n        myGame.selectedColumn(crds, 3);\r\n\r\n    }\r\n} // ciao
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/Main.java b/src/main/java/it/polimi/ingsw/Main.java
--- a/src/main/java/it/polimi/ingsw/Main.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/Main.java	(date 1679415306082)
@@ -6,7 +6,6 @@
 import it.polimi.ingsw.model.helpers.Pair;
 import it.polimi.ingsw.model.modelSupport.BoardCard;
 import it.polimi.ingsw.model.modelSupport.Player;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 import it.polimi.ingsw.model.modelSupport.exceptions.UnselectableCardException;
 
 public class Main {
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals;\r\n\r\nimport it.polimi.ingsw.model.CommonGoals.Strategy.*;\r\nimport it.polimi.ingsw.model.modelSupport.Player;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\n\r\npublic class CommonGoals {\r\n    private final EnumSet<CommonGoalType> possibleGoals = EnumSet.allOf(CommonGoalType.class);\r\n    private CommonGoalStrategy firstGoal;\r\n    private CommonGoalStrategy secondGoal;\r\n    private final ArrayList<Player> reachedFirstGoal = new ArrayList<>();\r\n    private final ArrayList<Player> reachedSecondGoal = new ArrayList<>();\r\n\r\n    public CommonGoals() {\r\n        int[] indexes = ThreadLocalRandom.current().ints(0, 12).distinct().limit(2).toArray();\r\n        indexes[0] = 3;\r\n        indexes[1] = 3;\r\n        switch (indexes[0]){\r\n            case 0:\r\n                firstGoal = new SixOfTwoGoalStrategy();\r\n                break;\r\n            case 1:\r\n                firstGoal = new FiveDiagonalGoalStrategy();\r\n                break;\r\n            case 2:\r\n                firstGoal = new FourOfFourGoalStrategy();\r\n                break;\r\n            case 3:\r\n                firstGoal = new FourCornersGoalStrategy();\r\n                break;\r\n            case 4:\r\n                firstGoal = new Double2x2GoalStrategy();\r\n                break;\r\n            case 5:\r\n                firstGoal = new MaxThreeDiffGoalStrategy();\r\n                break;\r\n            case 6:\r\n                firstGoal = new EightTilesGoalStrategy();\r\n                break;\r\n            case 7:\r\n                firstGoal = new FourLines3DiffGoalStrategy();\r\n                break;\r\n            case 8:\r\n                firstGoal = new TwoOfSixGoalStrategy();\r\n                break;\r\n            case 9:\r\n                firstGoal = new TwoOf5DiffGoalStrategy();\r\n                break;\r\n            case 10:\r\n                firstGoal = new FiveXGoalStrategy();\r\n                break;\r\n            case 11:\r\n                firstGoal = new TriangularGoalStrategy();\r\n        }\r\n        switch (indexes[1]){\r\n            case 0:\r\n                secondGoal = new SixOfTwoGoalStrategy();\r\n                break;\r\n            case 1:\r\n                secondGoal = new FiveDiagonalGoalStrategy();\r\n                break;\r\n            case 2:\r\n                secondGoal = new FourOfFourGoalStrategy();\r\n                break;\r\n            case 3:\r\n                secondGoal = new FourCornersGoalStrategy();\r\n                break;\r\n            case 4:\r\n                secondGoal = new Double2x2GoalStrategy();\r\n                break;\r\n            case 5:\r\n                secondGoal = new MaxThreeDiffGoalStrategy();\r\n                break;\r\n            case 6:\r\n                secondGoal = new EightTilesGoalStrategy();\r\n                break;\r\n            case 7:\r\n                secondGoal = new FourLines3DiffGoalStrategy();\r\n                break;\r\n            case 8:\r\n                secondGoal = new TwoOfSixGoalStrategy();\r\n                break;\r\n            case 9:\r\n                secondGoal = new TwoOf5DiffGoalStrategy();\r\n                break;\r\n            case 10:\r\n                secondGoal = new FiveXGoalStrategy();\r\n                break;\r\n            case 11:\r\n                secondGoal = new TriangularGoalStrategy();\r\n        }\r\n    }\r\n\r\n    public CommonGoalStrategy getFirstGoal() {\r\n        return firstGoal;\r\n    }\r\n\r\n    public CommonGoalStrategy getSecondGoal() {\r\n        return secondGoal;\r\n    }\r\n\r\n    public int calculateAllPoints(Player player, int numOfPlayers){\r\n        int ris;\r\n        int pointsOfFirst;\r\n        int pointsOfSecond;\r\n        /* firstGoal */\r\n        /* potrei fare un metodo per il calcolo dei punti di un goal, così da non dover riscrivere\r\n            la stessa cosa per entrambi i goal */\r\n        if(!reachedFirstGoal.contains(player)){\r\n            if (firstGoal.goalCompleted(player.getPlayersShelf().getShelfCards())) {/*boolean return*/\r\n                reachedFirstGoal.add(player);\r\n                if (numOfPlayers > 2) {\r\n                    pointsOfFirst = 8 - (reachedFirstGoal.indexOf(player) * 2);\r\n                } else {\r\n                    pointsOfFirst = 8 - (reachedFirstGoal.indexOf(player) * 4);\r\n                }\r\n            } else {\r\n                pointsOfFirst = 0;\r\n            }\r\n        }else{\r\n            pointsOfFirst = 0;\r\n        }\r\n        /* secondGoal */\r\n        if(!reachedSecondGoal.contains(player)){\r\n            if (secondGoal.goalCompleted(player.getPlayersShelf().getShelfCards())) {/*boolean return*/\r\n                reachedSecondGoal.add(player);\r\n                if (numOfPlayers > 2) {\r\n                    pointsOfSecond = 8 - (reachedSecondGoal.indexOf(player) * 2);\r\n                } else {\r\n                    pointsOfSecond = 8 - (reachedSecondGoal.indexOf(player) * 4);\r\n                }\r\n            } else {\r\n                pointsOfSecond = 0;\r\n            }\r\n        }else{\r\n            pointsOfSecond = 0;\r\n        }\r\n        ris = pointsOfFirst + pointsOfSecond;\r\n        return ris;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java	(date 1679415306083)
@@ -2,7 +2,6 @@
 
 import it.polimi.ingsw.model.CommonGoals.Strategy.*;
 import it.polimi.ingsw.model.modelSupport.Player;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 import java.util.*;
 import java.util.concurrent.ThreadLocalRandom;
Index: src/main/java/it/polimi/ingsw/model/modelSupport/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.modelSupport;\r\n\r\nimport it.polimi.ingsw.model.helpers.Pair;\r\nimport it.polimi.ingsw.model.modelSupport.enums.PersonalGoalType;\r\nimport it.polimi.ingsw.model.modelSupport.enums.TurnStateType;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\n\r\n/**\r\n * This class represents the player\r\n */\r\npublic class Player{\r\n    private final String nickname;\r\n    private Client ofClient;\r\n    private String UID;\r\n    private Integer score;\r\n    private PersonalGoal personalGoal;\r\n    private boolean hasChair;\r\n    private final Shelf withShelf;\r\n    private TurnStateType turnState;\r\n\r\n    //TODO: fare l'inizializzazione migliore con input anche il client\r\n\r\n    /**\r\n     * The player is set up, whith its nickname, shelf and related client\r\n     * @param nickname\r\n     */\r\n    public Player(String nickname){\r\n        this.nickname = nickname;\r\n        hasChair = false;\r\n        score = 0;\r\n        turnState = TurnStateType.CARDS_SELECTION;\r\n        withShelf = new Shelf();\r\n    }\r\n    public Integer getScore() {\r\n        return score;\r\n    }\r\n\r\n    /**\r\n     * This method sets the user's personal goal from an index (1 to 12).\r\n     * We know that the game won't provide an unusable index.\r\n     * @param personalGoalIndex\r\n     */\r\n    public void setPersonalGoalFromIndex(int personalGoalIndex){\r\n        this.personalGoal = new PersonalGoal(personalGoalIndex);\r\n    }\r\n\r\n    public Shelf getPlayersShelf(){return withShelf;}\r\n\r\n    public PersonalGoal getPersonalGoal() {\r\n        return personalGoal;\r\n    }\r\n\r\n    public boolean hasChair(){\r\n        return hasChair;\r\n    }\r\n\r\n    /**\r\n     * sets the chaired user\r\n     */\r\n    public void setHasChair(){\r\n        hasChair = true;\r\n    }\r\n\r\n    public void updateScore(Integer addedScore){\r\n        this.score += addedScore;\r\n    }\r\n\r\n    public String getNickname() {\r\n        return nickname;\r\n    }\r\n\r\n    /**\r\n     * Called once at game finished, adds the personal goal score to the user score\r\n     * @return returns the integer of the final score of tghe user\r\n     */\r\n    public int getFinalScore() {\r\n        //HAS TO BE CALLED ONLY ONCE\r\n        //TODO: possibility to put an observer from the player to the shelf to automatically update points\r\n        this.addPersonalGoalPoints();\r\n        return this.score;\r\n    }\r\n\r\n    private void addPersonalGoalPoints(){\r\n        score += personalGoal.calculatePoints(withShelf.getShelfCards());\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/modelSupport/Player.java b/src/main/java/it/polimi/ingsw/model/modelSupport/Player.java
--- a/src/main/java/it/polimi/ingsw/model/modelSupport/Player.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/modelSupport/Player.java	(date 1679415306093)
@@ -1,14 +1,6 @@
 package it.polimi.ingsw.model.modelSupport;
 
-import it.polimi.ingsw.model.helpers.Pair;
-import it.polimi.ingsw.model.modelSupport.enums.PersonalGoalType;
 import it.polimi.ingsw.model.modelSupport.enums.TurnStateType;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Random;
 
 
 /**
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class EightTilesGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n        ArrayList<colorType> colors = new ArrayList<>();\r\n        int completed = 0;\r\n        int [] numOfColor = {0,0,0,0,0,0};\r\n\r\n        for(int i = 0; i < Mat.length && completed == 0; i++){\r\n            for(int j = 0; i< Mat[0].length && completed == 0; j++) {\r\n                if(Mat[i][j] != null){\r\n                    if(!colors.contains(Mat[i][j].getColor())){\r\n                        colors.add(Mat[i][j].getColor());\r\n                    }\r\n                    numOfColor[colors.indexOf(Mat[i][j].getColor())]++;\r\n                    if(numOfColor[colors.indexOf(Mat[i][j].getColor())] == 8){\r\n                        completed = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(completed == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java	(date 1679415306085)
@@ -1,7 +1,6 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 import java.util.ArrayList;
 
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.helpers.Pair;\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Double2x2GoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n        ArrayList<Pair<Integer,Integer>> blocksCoordinates = new ArrayList<>();\r\n        ArrayList<Pair<colorType,Integer>> colors = new ArrayList<>();\r\n        int completed = 0;\r\n\r\n        for(int i = 0; i < Mat.length-1 && completed == 0; i++){\r\n            for(int j = 0; i< Mat[0].length-1 && completed == 0; j++){\r\n                if(Mat[i][j] != null && Mat[i][j+1] != null && Mat[i+1][j] != null && Mat[i+1][j+1] != null) {\r\n                    int found = 0;\r\n                    if (Mat[i][j].getColor().equals(Mat[i][j + 1].getColor()) &&\r\n                            Mat[i][j].getColor().equals(Mat[i + 1][j].getColor()) &&\r\n                            Mat[i][j].getColor().equals(Mat[i + 1][j + 1].getColor())) {\r\n\r\n                        Pair<colorType, Integer> updateColor = new Pair<>(Mat[i][j].getColor(), 1);\r\n\r\n                        Pair<Integer, Integer> coordinatesOne = new Pair<>(i, j);\r\n                        Pair<Integer, Integer> coordinatesTwo = new Pair<>(i, j + 1);\r\n                        Pair<Integer, Integer> coordinatesThree = new Pair<>(i + 1, j);\r\n                        Pair<Integer, Integer> coordinatesFour = new Pair<>(i + 1, j + 1);\r\n                        /* potrei mettere il primo caso isempty per ridurre da 4 a 1 controllo la prima volta, ma è irrilevante */\r\n                        if (!blocksCoordinates.contains(coordinatesOne) && !blocksCoordinates.contains(coordinatesTwo) &&\r\n                                !blocksCoordinates.contains(coordinatesThree) && !blocksCoordinates.contains(coordinatesFour)) {\r\n                            blocksCoordinates.add(coordinatesOne);\r\n                            blocksCoordinates.add(coordinatesTwo);\r\n                            blocksCoordinates.add(coordinatesThree);\r\n                            blocksCoordinates.add(coordinatesFour);\r\n                            found = 1;\r\n                            if (!colors.contains(updateColor)) {\r\n                                colors.add(updateColor);\r\n                            } else {\r\n                                completed = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (found == 1) {\r\n                        j++;\r\n                        found = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(completed == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java	(date 1679415306084)
@@ -2,7 +2,6 @@
 
 import it.polimi.ingsw.model.helpers.Pair;
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 import java.util.ArrayList;
 
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\npublic class FiveXGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n        colorType chosen;\r\n        int found = 0;\r\n\r\n        for(int i = 1; i < Mat.length-1 && found == 0; i++){\r\n            for(int j = 1; j < Mat[0].length-1 && found == 0; j++){\r\n                if(Mat[i][j] != null && Mat[i-1][j-1] != null && Mat[i-1][j+1] != null &&\r\n                        Mat[i+1][j-1] != null && Mat[i+1][j+1] != null) {\r\n                    chosen = Mat[i][j].getColor();\r\n                    if (Mat[i-1][j-1].getColor().equals(chosen) && Mat[i-1][j+1].getColor().equals(chosen) &&\r\n                            Mat[i+1][j-1].getColor().equals(chosen) && Mat[i+1][j+1].getColor().equals(chosen)) {\r\n                        found = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(found == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java	(date 1679415306086)
@@ -1,7 +1,6 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 public class FiveXGoalStrategy implements CommonGoalStrategy{
     public boolean goalCompleted(BoardCard[][] Mat){
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\npublic class FiveDiagonalGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n        int cols = Mat[0].length;\r\n        int rows = Mat.length;\r\n        int valid = 0;\r\n/*\r\nControlla tutte e quattro le possibilità a meno che valid non sia 1, a causa di un\r\ncaso favorevole\r\n */\r\n        if(Mat[0][0] != null) {\r\n            colorType chosen = Mat[0][0].getColor();\r\n            int found = 1;\r\n            for (int i = 0; i < Mat.length-1 && found == 1; i++) {\r\n                if(Mat[i][i] != null){\r\n                    if(!Mat[i][i].getColor().equals(chosen)){\r\n                       found = 0;\r\n                    }\r\n                }else{\r\n                    found = 0;\r\n                }\r\n            }\r\n            if(found == 1){\r\n                valid = 1;\r\n            }\r\n        }\r\n        if(Mat[1][0] != null && valid == 0){\r\n            colorType chosen = Mat[1][0].getColor();\r\n            int found = 1;\r\n            for (int i = 1; i < Mat.length && found == 1; i++) {\r\n                if(Mat[i][i] != null){\r\n                    if(!Mat[i][i].getColor().equals(chosen)){\r\n                        found = 0;\r\n                    }\r\n                }else{\r\n                    found = 0;\r\n                }\r\n            }\r\n            if(found == 1){\r\n                valid = 1;\r\n            }\r\n        }\r\n        if(Mat[0][cols-1] != null && valid == 0){\r\n            colorType chosen = Mat[0][cols-1].getColor();\r\n            int found = 1;\r\n            for (int i = 0; i < Mat.length-1 && found == 1; i++) {\r\n                if(Mat[i][cols-(1+i)] != null){\r\n                    if(!Mat[i][cols-(1+i)].getColor().equals(chosen)){\r\n                        found = 0;\r\n                    }\r\n                }else{\r\n                    found = 0;\r\n                }\r\n            }\r\n            if(found == 1){\r\n                valid = 1;\r\n            }\r\n        }\r\n        if(Mat[1][cols-1] != null && valid == 0){\r\n            colorType chosen = Mat[1][cols-1].getColor();\r\n            int found = 1;\r\n            for (int i = 1; i < Mat.length && found == 1; i++) {\r\n                if(Mat[i][cols-i] != null){\r\n                    if(!Mat[i][cols-i].getColor().equals(chosen)){\r\n                        found = 0;\r\n                    }\r\n                }else{\r\n                    found = 0;\r\n                }\r\n            }\r\n            if(found == 1){\r\n                valid = 1;\r\n            }\r\n        }\r\n        if(valid == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java	(date 1679415306085)
@@ -1,7 +1,6 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 public class FiveDiagonalGoalStrategy implements CommonGoalStrategy{
     public boolean goalCompleted(BoardCard[][] Mat){
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class FourLines3DiffGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n\r\n        ArrayList<colorType> different = new ArrayList<>();\r\n        int correctLines = 0;\r\n        int completed = 0;\r\n\r\n        for(int i = 0; i < Mat.length && completed == 0; i++){\r\n            int valid = 1;\r\n            different.removeAll(different);\r\n            for(int j = 0; j < Mat[0].length && valid == 1; j++){\r\n                if(Mat[i][j] != null) {\r\n                    if (!different.contains(Mat[i][j].getColor())) {\r\n                        different.add(Mat[i][j].getColor());\r\n                        if(different.size() > 3){\r\n                            valid = 0;\r\n                        }\r\n                    }\r\n                }else{\r\n                    valid = 0;\r\n                }\r\n            }\r\n            if(valid == 1){\r\n                correctLines++;\r\n                if(correctLines == 4){\r\n                    completed = 1;\r\n                }\r\n            }\r\n        }\r\n        if(completed == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java	(date 1679415306087)
@@ -1,7 +1,6 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 
 import java.util.ArrayList;
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class MaxThreeDiffGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n        ArrayList<colorType> different = new ArrayList<>();\r\n        int completed = 0;\r\n        int correctLines = 0;\r\n\r\n\r\n        for(int j = 0; j < Mat[0].length && completed == 0; j++){\r\n            different.removeAll(different);\r\n            int valid = 1;\r\n            for(int i = 0; i < Mat.length && valid == 1; i++){\r\n                if(Mat[i][j] != null) {\r\n                    if (!different.contains(Mat[i][j].getColor())) {\r\n                        different.add(Mat[i][j].getColor());\r\n                        if(different.size() > 3){\r\n                            valid = 0;\r\n                        }\r\n                    }\r\n                }else{\r\n                    valid = 0;\r\n                }\r\n            }\r\n            if(valid == 1){\r\n                correctLines++;\r\n                if(correctLines == 3){\r\n                    completed = 1;\r\n                }\r\n            }\r\n        }\r\n        if(completed == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java	(date 1679415306088)
@@ -1,7 +1,6 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 import java.util.ArrayList;
 
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class TwoOfSixGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n        ArrayList<colorType> colors = new ArrayList<>();\r\n        int completed = 0;\r\n        int correctLines = 0;\r\n\r\n        for(int j = 0; j < Mat[0].length && completed == 0; j++){\r\n            int valid = 1;\r\n            colors.removeAll(colors);\r\n            for(int i = 0; i < Mat.length && valid == 1; i++){\r\n                if(Mat[i][j] != null) {\r\n                    if (!colors.contains(Mat[i][j].getColor())) {\r\n                        colors.add(Mat[i][j].getColor());\r\n                    } else {\r\n                        valid = 0;\r\n                    }\r\n                }else{\r\n                    valid = 0;\r\n                }\r\n            }\r\n            if(valid == 1){\r\n                correctLines++;\r\n                if(correctLines == 2){\r\n                    completed = 1;\r\n                }\r\n            }\r\n        }\r\n        if(completed == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    };\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java	(date 1679415306090)
@@ -1,7 +1,6 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
 
 import java.util.ArrayList;
 
Index: src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.CommonGoals.Strategy;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.BoardCard;\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\nimport java.util.*;\r\npublic class TwoOf5DiffGoalStrategy implements CommonGoalStrategy{\r\n    public boolean goalCompleted(BoardCard[][] Mat){\r\n/* si può fare come twoofsix, in maniera più leggibile e semplice */\r\n\r\n/* Ho creato un set a partire dall'enum e per iterarci con un indice l'ho resa una lista */\r\n        EnumSet<colorType> enumColori = EnumSet.of(colorType.PURPLE,colorType.BLUE,colorType.LIGHT_BLUE,colorType.YELLOW,colorType.WHITE,colorType.GREEN);\r\n        List<colorType> colori = new ArrayList<>(enumColori);\r\n\r\n        int[] colors = {0,0,0,0,0,0};\r\n        int correctLines = 0;\r\n        int completed = 0;\r\n        for(int i = Mat.length; i > 0 && completed == 0; i--){\r\n            int valid = 1;\r\n            for(int j = 0; j < Mat[0].length && valid == 1; j++){\r\n                if(Mat[i][j] != null) {\r\n                    int found = 0;\r\n                    int z;\r\n/* scorro la lista formata dall'enum, tenendo l'indice per poi aumentare il corrispondente in colors */\r\n                    for (z = 0; z < colori.size() && found == 0; z++) {\r\n                        if (colori.get(z).equals(Mat[i][j].getColor())) {\r\n                            found = 1;\r\n                        }\r\n                    }\r\n                    colors[z-1]++;\r\n                    if (colors[z-1] == 2) {\r\n                        valid = 0;\r\n                    }\r\n                }else{\r\n                    valid = 0;\r\n                }\r\n            }\r\n            if(valid == 1){\r\n                correctLines++;\r\n/* \"completato\" lo uso per evitare di controllare più di due righe */\r\n                if(correctLines == 2){\r\n                    completed = 1;\r\n                }\r\n            }\r\n/* resetto colors per la prossima riga */\r\n            for(int j = 0; j < colors.length; j++){\r\n                colors[j] = 0;\r\n            }\r\n        }\r\n        if(completed == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    };\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java
--- a/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java	(date 1679415306089)
@@ -1,7 +1,7 @@
 package it.polimi.ingsw.model.CommonGoals.Strategy;
 
 import it.polimi.ingsw.model.modelSupport.BoardCard;
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
+
 import java.util.*;
 public class TwoOf5DiffGoalStrategy implements CommonGoalStrategy{
     public boolean goalCompleted(BoardCard[][] Mat){
Index: src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.modelSupport;\r\n\r\nimport it.polimi.ingsw.model.modelSupport.enums.colorType;\r\n\r\npublic class BoardCard {\r\n\r\n    public final colorType color;\r\n\r\n\r\n    public BoardCard(colorType color) {\r\n        this.color = color;\r\n\r\n    }\r\n    public colorType getColor() {\r\n        return color;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java b/src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java
--- a/src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java	(date 1679415306090)
@@ -1,7 +1,5 @@
 package it.polimi.ingsw.model.modelSupport;
 
-import it.polimi.ingsw.model.modelSupport.enums.colorType;
-
 public class BoardCard {
 
     public final colorType color;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2c7ea511-349f-4786-9700-d1a9b565ffee\" name=\"Changes\" comment=\"fixed stuff and some forbidden tests\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/GameObservable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/GameObservable.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/InitStateMessage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/InitStateMessage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedCardsMessage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedCardsMessage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedColumnsMessage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedColumnsMessage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/Shelf.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/Shelf.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2N3oxUKEkpDzzCC2sEcJYgHGj32\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;Errors&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Client\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"it.polimi.ingsw.Main\" />\r\n      <module name=\"ProgettoIDS23\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2c7ea511-349f-4786-9700-d1a9b565ffee\" name=\"Changes\" comment=\"\" />\r\n      <created>1678902372336</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678902372336</updated>\r\n      <workItem from=\"1678902374655\" duration=\"7636000\" />\r\n      <workItem from=\"1679140207267\" duration=\"7796000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\r\n      <created>1678903177375</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678903177375</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first commit\">\r\n      <created>1678903640332</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678903640332</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"creazione classe Game\">\r\n      <created>1678904700373</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678904700373</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"creazione classe Controller\">\r\n      <created>1678904959836</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678904959836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"directory management\">\r\n      <created>1679062925504</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679062925504</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"created CommonGoals, some error messages, Pair and worked on Game\">\r\n      <created>1679140836621</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679140836621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"modified pattern\">\r\n      <created>1679244738224</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679244738224</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"added PersonalGoal and player\">\r\n      <created>1679255189842</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679255189842</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"finished first version of Game, also finished first version of player and implemented a way of managing the personal goals\">\r\n      <created>1679271689797</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679271689797</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"finished first version of Game, also finished first version of player and implemented a way of managing the personal goals\">\r\n      <created>1679312251930</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679312251930</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"few updates on Player, created javadoc dir\">\r\n      <created>1679329947805</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679329947805</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"few updates on Player, created javadoc dir\">\r\n      <created>1679344936534</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679344936534</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"fixed stuff and some forbidden tests\">\r\n      <created>1679354657787</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679354657787</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"fixed stuff and some forbidden tests\">\r\n      <created>1679395869369</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679395869369</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"fixed stuff and some forbidden tests\">\r\n      <created>1679399010846</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679399010846</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"16\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main/main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"HEAD\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"creazione classe Game\" />\r\n    <MESSAGE value=\"creazione classe Controller\" />\r\n    <MESSAGE value=\"directory management\" />\r\n    <MESSAGE value=\"created CommonGoals, some error messages, Pair and worked on Game\" />\r\n    <MESSAGE value=\"modified pattern\" />\r\n    <MESSAGE value=\"added PersonalGoal and player\" />\r\n    <MESSAGE value=\"finished first version of Game, also finished first version of player and implemented a way of managing the personal goals\" />\r\n    <MESSAGE value=\"few updates on Player, created javadoc dir\" />\r\n    <MESSAGE value=\"fixed stuff and some forbidden tests\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fixed stuff and some forbidden tests\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ed2100c1c46795fb0e34a52073d1c3ecbebb2bab)
+++ b/.idea/workspace.xml	(date 1679415306080)
@@ -8,13 +8,19 @@
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/Main.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/CommonGoals.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/GameObservable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/GameObservable.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/InitStateMessage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/InitStateMessage.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedCardsMessage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedCardsMessage.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedColumnsMessage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/messageModel/matchStateMessages/SelectedColumnsMessage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/Double2x2GoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/EightTilesGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveDiagonalGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FiveXGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/FourLines3DiffGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/MaxThreeDiffGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOf5DiffGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/CommonGoals/Strategy/TwoOfSixGoalStrategy.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/BoardCard.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/LivingRoom.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/PersonalGoal.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/Shelf.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/Shelf.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/Player.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/enums/colorType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/polimi/ingsw/model/modelSupport/enums/colorType.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -24,8 +30,8 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="Enum" />
         <option value="Class" />
+        <option value="Enum" />
       </list>
     </option>
   </component>
